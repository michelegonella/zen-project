/*
 * Copyright 2008-2018 the original author or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


{namespace com.nominanuda.webapp.format}


/**
 * @param v
 * @param s
 */
{template ._format_intK_ private="true"}
	{if $v >= 1000}
		{let $r: floor($v / 1000) /} // get thousands
		{let $v: $v - ($r * 1000) /} // keep hundreds
		{call ._format_intK_ data="all"}{param v: $r /}{/call}{$s}{if $v < 100}0{if $v < 10}0{/if}{/if}{$v}
	{elseif $v}
		{$v}
	{else}
		0
	{/if}
{/template}


/**
 * @param s
 * @param v
 * @param d
 * @param i
 */
{template ._format_dec0_ private="true"}
{nil} // needed (without preceding tab) to avoid space after decimal separator (as in "123. 45")
	{if $i > 0 and ($v * 10) < 1}
		{call ._format_dec0_}
			{param s: '0' + $s /}
			{param v: $v * 10 /}
			{param d: $d /}
			{param i: $i - 1 /}
		{/call}
	{else} // render
		{$s |truncate:$d} // truncate to remove ".0" added by java number rendering
	{/if}
{/template}


/**
 * @param? value
 * @param? decimals // if -1 will round the number
 * @param separatorT
 * @param separatorD
 */
{template ._format_number private="true"}
	{let $d: $decimals ?: 0 /} // decimals
	{if $value}
		{let $xI: $d >= 0 ? floor($value) : round($value) /} // integer part
		{call ._format_intK_}
			{param v: $xI /}
			{param s: $separatorT /}
		{/call}
		{if $d > 0}
			{let $xD: round($value - $xI, $d) /} // decimal part
			{$separatorD}
			{call ._format_dec0_}
				{param s}
					{switch $d} // because there is no pow operator
					{case 1}{$xD * 10}
					{case 2}{$xD * 100}
					{case 3}{$xD * 1000}
					{case 4}{$xD * 10000}
					{case 5}{$xD * 100000}
					{/switch}
				{/param}
				{param v: $xD /}
				{param d: $d /}
				{param i: $d /}
			{/call}
		{/if}
	{else}
		0{if $d}{$separatorD}{for $_ in range($d)}0{/for}{/if}
	{/if}
{/template}



/**
 * @param? value
 * @param? decimals
 */
{deltemplate com.nominanuda.webapp.format.number}
	{call ._format_number data="all"}
		{param separatorT: '\'' /}
		{param separatorD: '.' /}
	{/call}
{/deltemplate}


/**
 * @param? value
 */
{deltemplate com.nominanuda.webapp.format.currency}
	{call ._format_number data="all"}
		{param separatorT: '\'' /}
		{param separatorD: '.' /}
		{param decimals: 2 /}
	{/call}
{/deltemplate}


/**
 * @param? value
 */
{deltemplate com.nominanuda.webapp.format.cents}
	{call ._format_number}
		{param value: ($value ?: 0) / 100 /}
		{param separatorT: '\'' /}
		{param separatorD: '.' /}
		{param decimals: 2 /}
	{/call}
{/deltemplate}